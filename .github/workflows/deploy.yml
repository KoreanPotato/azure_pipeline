name: CI/CD_PIPELINE

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs: 
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_public_key: "${{ secrets.SSH_PUBLIC_KEY }}"
      TF_VAR_subscription_id: "${{ secrets.SUBSCRIPTION_ID }}"
      TF_VAR_client_id: "${{ secrets.ARM_CLIENT_ID }}"
      TF_VAR_client_secret: "${{ secrets.ARM_CLIENT_SECRET }}"
      TF_VAR_tenant_id: "${{ secrets.ARM_TENANT_ID }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      # - name: Delete resource group if exists
      #   run: |
      #     az group delete --name myResourceGroup --yes --no-wait || true
        
      # - name: Wait for Azure to finish deleting RG
      #   run: |
      #     for i in {1..30}; do
      #       echo "Checking if group still exists..."
      #       if az group exists --name myResourceGroup | grep true; then
      #         echo "Group still exists. Waiting 10s..."
      #         sleep 10
      #       else
      #         echo "Group deleted!"
      #         break
      #       fi
      #     done


      - name: Delete VM if exists
        run: |
          az vm delete \
            --name UbuntuVM \
            --resource-group myResourceGroup \
            --yes || true

          az network nic delete \
            --name myNIC \
            --resource-group myResourceGroup || true

      - name: Wait for Azure to release deleted resources
        run: sleep 30
      
      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Wait for Azure 
        run: sleep 60

      - name: Get Terraform output (public IP)
        run: |
          cd terraform
          IP=$(terraform output -raw public_ip_address | tr -d '\r\n')
          echo "Полученный IP: $IP"
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV

      - name: Write SSH key
        run: | 
           mkdir -p ~/.ssh
           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
           chmod 600 ~/.ssh/id_rsa

      - name: Initialization .ini file
        run: |
          echo "[azure]" > ansible/inventory.ini

      - name: Copying secret data
        run: |
          echo "${{ env.PUBLIC_IP }} ansible_user=${{ secrets.SSH_USER }} ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/inventory.ini

      - name: Set up ansible
        run: |
          sudo apt update && sudo apt install -y ansible sshpass

      - name: Configure azure usung ansible
        run: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ansible/inventory.ini ansible/ansible.setup.yml

      - name: Build & Push docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          cd app
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker compose -f Docker-compose.yml build
          docker compose -f Docker-compose.yml push

      - name: Deploy with Ansible
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i ansible/inventory.ini ansible/ansible.deploy.yml \
          --extra-vars '
          {
            "backend_image": "${{ secrets.DOCKER_USERNAME }}/azureapp-backend:latest",
            "frontend_image": "${{ secrets.DOCKER_USERNAME }}/azureapp-frontend:latest",
            "docker_username": "${{ secrets.DOCKER_USERNAME }}",
            "docker_password": "${{ secrets.DOCKER_PASSWORD }}"
          }'