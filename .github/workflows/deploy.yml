name: CI/CD_PIPELINE

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get_ip.outputs.ip }}
    env:
      TF_VAR_public_key: "${{ secrets.SSH_PUBLIC_KEY }}"
      TF_VAR_subscription_id: "${{ secrets.SUBSCRIPTION_ID }}"
      TF_VAR_client_id: "${{ secrets.ARM_CLIENT_ID }}"
      TF_VAR_client_secret: "${{ secrets.ARM_CLIENT_SECRET }}"
      TF_VAR_tenant_id: "${{ secrets.ARM_TENANT_ID }}"

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clean up old VM (if exists)
        run: |
          az vm delete --name UbuntuVM --resource-group myResourceGroup --yes || true
          az network nic delete --name myNIC --resource-group myResourceGroup || true

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Get Terraform output (public IP)
        id: get_ip
        run: |
          cd terraform
          IP=$(terraform output -raw public_ip_address | tr -d '\r\n')
          echo "Полученный IP: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT


  configure-vm:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Write SSH key
        run: | 
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create inventory file
        run: |
          echo "[azure]" > ansible/inventory.ini
          echo "${{ needs.terraform.outputs.public_ip }} ansible_user=${{ secrets.SSH_USER }} ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/inventory.ini
          cat ansible/inventory.ini

      - name: Set up ansible
        run: sudo apt update && sudo apt install -y ansible sshpass

      - name: Configure Azure VM
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i ansible/inventory.ini ansible/ansible.setup.yml


  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build & Push Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          cd app
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker compose -f Docker-compose.yml build
          docker compose -f Docker-compose.yml push


  deploy:
    needs: [configure-vm, build-docker-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Write SSH key
        run: | 
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create inventory 
        run: |
          echo "[azure]" > ansible/inventory.ini
          echo "${{ needs.terraform.outputs.public_ip }} ansible_user=${{ secrets.SSH_USER }} ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/inventory.ini

      - name: Set up ansible
        run: sudo apt update && sudo apt install -y ansible sshpass

      - name: Run deploy with Ansible
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i ansible/inventory.ini ansible/ansible.deploy.yml \
          --extra-vars '
          {
            "backend_image": "${{ secrets.DOCKER_USERNAME }}/azureapp-backend:latest",
            "frontend_image": "${{ secrets.DOCKER_USERNAME }}/azureapp-frontend:latest",
            "docker_username": "${{ secrets.DOCKER_USERNAME }}",
            "docker_password": "${{ secrets.DOCKER_PASSWORD }}"
          }'
